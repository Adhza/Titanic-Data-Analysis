# -*- coding: utf-8 -*-
"""One Week Project Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wNS2KdOaqfMu6UYTH8kP4lPDIQe-ZrWW

# **IMPORT LIBRARY & LOAD DATA**
"""

# Library for data pre-processing
import pandas as pd
import numpy as np

# Library for visualization
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as mn

# Library for load data
from google.colab import files

# Library for handle warning
import warnings
warnings.filterwarnings("ignore")

"""- Import files from local disk"""

# upload file
uploaded = files.upload()

dataraw_file = list(uploaded.keys())[0]

"""- Read data with format .csv"""

# load data and save it in the titanic_data variable
titanic_data = pd.read_csv('Titanic-Dataset.csv')

"""# **DATA UNDERSTANDING**

- Check **total rows** and **columns** of dataset
- Check **datatype** of each **variables**
"""

titanic_data

titanic_data.head()

titanic_data.tail()

"""- Check information of data about column, total for each data and datatype"""

titanic_data.info()

"""## Description of variables
- **PassengerId** : unique identifying number for each passenger
- **Survived** : identify surviving passengers (0 : No, 1 : Yes)
- **Pclass** : class of passengers (1 : 1st class, 2 : 2nd class, 3 : 3rd class)
- **Name** : name of passengers
- **Sex** : gender of passengers (male or female)
- **Age**: age of passengers
- **Sibsp** : number of siblings or spouses
- **Parch** : number of parents
- **Ticket** : ticket number issued to the passenger
- **Fare** : amount of money spent on their ticket
- **Cabin** : category cabin
- **Embarked** : the port where the passenger embarked from (C : Cherbourg, Q : Queenstown, S : Southampton)

We have **891 rows** with **12 columns** as **variables**. The **data type** for each variable in the **Titanic dataset** consists of **int64** with **5 variables**, **float64** with **2 variables** and **object (number + strings)** with **5 variables**.

# **CHECK MISSING DATA VALUE**

There appears to be an oddity in the **total data** for the **Cabin**, **Age** and **Embarked** **variables**.
it could be said to be **missing data**, it is necessary to **handle missing values** ​​because it will affect **future processes**.

- We need to investigate more missing values with library missingno
"""

mn.matrix(titanic_data)

"""Based on the results of the investigation, there are **holes in the Age, Cabin and Embarked variables**. This proves that there is **missing data** on this variable.

- Count of missing data and get percentage for each missing variable
"""

row = titanic_data.shape[0] # call variable row for calculation percentage (%)
count = titanic_data.isna().sum().sort_values(ascending=False) # selection missing value of titanic dataset with func. isna() and counting with .sum()
percent = ((titanic_data.isna().sum()/row)*100).sort_values(ascending=False) # calc. percentage and non active ascending
percent = round(percent, 2) # make two numbers after the comma
td_missing = list(zip(count, percent)) # stores the count and percent output in a list. then, combine the 2 lists into one using the zip function
td_missing = pd.concat([count, percent], axis=1, keys=['Count of Missing', 'Percentage (%)']) # concat 2 data on dataframe
td_missing

"""We have **687 total missing data** on **Cabin variables** with percentage **77.10 %** of the entire data, **177 total missing data** on **Age variables** with **percentage** **19.87 %** of the entire data and **2 total missing data** on **Embarked variables** with **percentage** **0.22 %** of the entire data.
**So, let's handling missing values.**

## **Handling Missing Values**

**Handling missing values data** for **Cabin variables**

Handling with fill unique data
"""

titanic_data['Cabin'].unique() # check unique data of Cabin variables

"""Has **nan** data on **cabin variables**. Maybe because in my opinion the cabin feature is **not too important to analyze**, it would be better if we d**elete the column**. Because in this case we want to **study handling missing values ​​in category data**, we can use the **bfill or ffill method**. because in this case the missing data **reached 77%**. If, using the **median or mode imputation** method it will cause **outliers**.

"""

# handling missing value with function bfill = bfiil method retrieves the data afterwards.
# This method is best practical for handling missing values ​​if there is a lot of missing data

titanic_data['Cabin'] = titanic_data['Cabin'].fillna(method='bfill') # put variable most_freq on .function fillna() for fill in missing data on cabin variable

sns.countplot(x = 'Cabin', data = titanic_data)
plt.title('handling missing with bfill', fontweight='bold')

"""You can see the plot above, after handling missing values ​​using bfill there are still outliers. This is normal because almost **70%** of the data is lost for the cabin feature.

- Let's check data after handle with most appear frequency
"""

titanic_data['Cabin'].info()

"""We can see on column Cabin, Before handle missing values total data is **204**. And, now total data after handle missing values is **891**. So, let's continue to handle other missing values.

**Handling missing values data** for **Embarked variables**

Because there is only a small amount of missing data in the embarked variables with a total of 2 data. then just handle it with the most data frequency

- Check unique data
"""

titanic_data['Embarked'].unique() # Check unique of data Embarked

"""Have a **nan** unique data on Embarked variables

- plotting data  with countplot
"""

sns.countplot(titanic_data['Embarked']) # Plotting data with countplot

"""- Unique data **S appear most frequently**
- Has **nan** data on **Embarked variables**. Fill with **mode**
"""

mode_freq = titanic_data['Embarked'].mode()[0] # Check the data that appears most often in the Age variable

titanic_data['Embarked'] = titanic_data['Embarked'].fillna(mode_freq) # fill with output mode

"""- Check total missing values"""

titanic_data['Embarked'].isnull().sum()

titanic_data['Embarked'].info()

"""We can see on column Embarked, Before handle missing values total data is **889**. And, now total data after handle missing values is **891**. So, let's continue to handle other missing values.

**Handling missing values data** for **Age variables**

Let's check total missing value
"""

titanic_data['Age'].isnull().sum()

"""Let's check best method for handling missing values on Age variables with boxplot. Boxplot checks are carried out to see outliers in the data, so that from this we can determine the best method to use."""

sns.boxplot(titanic_data['Age']) # check null and outlier on Age variable

"""- We can see the **boxplot** visualization, the ages of the passengers are quite evenly distributed, it can be seen from the **top whisker** and **bottom whisker** which are relatively **equal in length** and the boxes **q1, q2 and q3** are **relatively evenly** **distributed**. So, it can be concluded that **25%** of passengers are under** 20 years old**, **25%** of passengers are **over 38 years** **old** and **50%** are **between 20-38 years old**.
- There is **lots outlier on Age variables**. The appropriate method for handling missing values ​​if there are **outliers is to use method ffill**

"""

titanic_data['Age'] = titanic_data['Age'].fillna(method='ffill') # fill missing values with ffill

sns.countplot(x = 'Age', data = titanic_data)
plt.title('handling missing with ffill', fontweight='bold')

"""- Check total missing values after handling missing values"""

titanic_data['Age'].isnull().sum()

titanic_data.isna().sum() # more check missing values

"""**Data already clear from missing values**

# **CHECK UNIQUE CATEGORICAL VARIABLE**

- First, check **all data categorical**. We find **Survived, Pclass and Embarked Variables difficult to understand**. We must **change the keys** of data to make them **readable.**
"""

titanic_data

"""- Start with **change the keys** of **categorical variables** to make them **readable**

1.   Replace data on column survived with 0 : No and 1 : Yes
2.   Replace data on column Pclass with 1 : 1st class, 2 : 2nd class and 3 : 3 rd class
3.   Replace data on column Embarked with C : Cherbourg, Q : Queenstown and S : Southampton



"""

# copy titanic data for visualize to new dataframe
visualize = titanic_data.copy()

# change key of variables survived (0 : No, 1 : Yes)
visualize.loc[:,'Survived'].replace([0,1],['No','Yes'], inplace = True)
print(visualize['Survived'])

# change key of variables Pclass (1:1st class, 2:2nd class, 3:3rd class)
visualize.loc[:,'Pclass'].replace([1,2,3],['1st class', '2nd class', '3rd class'], inplace = True)
print(visualize['Pclass'])

# change key of variables Embarked (C : Cherbourg, Q : Queenstown, S : Southampton)
visualize.loc[:,'Embarked'].replace(['C','Q','S'],['Cherbourg', 'Queenstown', 'Southampton'], inplace = True)
print(visualize['Embarked'])

"""so, now we have data that is easier to understand

- Analysis **unique categorical variables**
"""

# Grouping categorical variables
visualized_uniq = visualize[['Embarked', 'Pclass', 'Survived', 'Sex', 'Cabin']]

print('Total of unique categorical variables : ')
print('-'*30)
for columns in visualized_uniq:
    print('{} : {} unique value(s)'.format(columns, visualized_uniq[columns].nunique())) # check & total uniq value based columns on visualized_uniq
print('\n')

print('Definition of unique categorical variables : ')
print('-'*30)
for columns in visualized_uniq:
    print('{} : {}'.format(columns, ', '.join(visualized_uniq[columns].unique()))) # check definition of unique categorical variables

"""**Embarked and Pclass** variables have **3 unique** values, **Survived and Sex** Variables have **2 unique** values, and **Cabin** have **147 unique** values.

# **CHECK CONTINOUS VARIABLE**

Let's check and describe column age and fare
"""

con_visualize = visualize[['Age', 'Fare']] # group columns numeric age and fare

con_visualize.describe()

"""- **Analysis Age Variables :**

  **Based on the data above**, it can be explained that all passengers, with a total of **891**, have all **age data**. Where, the average age can be seen in the **mean** variable of **29.36**. The **standard deviation is 13.01**, which means that passengers have an **age** in the **range (29.36 - 13.01)** to **(29.36 + 13.01).**

  **a percentile value of 25%** indicates that **25% of passengers are less than 22 years old**. **a percentile value of 50%** indicates that **50% of passengers are less than 28 years old**. **a percentile value of 75%** indicates that **75% of passengers are less than 35 years old.**

  **The min value in the data above is 0.42**, which can be concluded that the **minimum age for each passenger is 0.42 years**. **The maximum value in the data above is 80**, which can be concluded that the maximum age for each passenger is 80 years.


- **Analysis Fare Variables :**

  **Based on the data above**, it can be explained that all passengers, with a total of **891**, have all **fare**. Where, the average fare can be seen in the **mean** variable of **32.204**. The **standard deviation is 49.69**, which means that passengers have an **fare** in the **range (49.69 - 32.204)** to **(49.69 + 32.204).**

  **The 25% percentile value** indicates that **25% of passengers pay fares less than 7.91**. **a percentile value of 50%** indicates that **50% of passengers pay a fare of less than 14.45.** **a percentile value of 75%** indicates that **75% of passengers pay fares less than 31.**

  **The min value in the data above is 0**, which can be concluded that the **minimum fares for each passenger is 0**. **The maximum value in the data above is 512.329**, which can be concluded that the **maximum fare for each passenger** is **512.329**.

# **EXPLORATION - VISUALIZATIONS**

## **Single Variables**

### Analysis **Survived** Variable

- Get **total data** on passengers who **survived (1)** and **did not survive (0)**
"""

print(visualize['Survived'].value_counts())

"""- Plotting with **countplot**"""

sns.set_style('whitegrid')
sns.countplot(x='Survived', data=visualize)
plt.title('Survived Variables', fontweight='bold')

"""- We can see that from the **891 total passengers**, **549 passengers did not survive** and **342 passengers survived**.
- It can be concluded that there were **more passengers who did not survive** than passengers who **survived**

### Analysis **Pclass** Variable

- Get **total data** on passengers who **1st class**, **2nd class** and **3rd class**
"""

print(visualize['Pclass'].value_counts())

"""Plotting with **countplot**"""

sns.set_style('whitegrid')
sns.countplot(x='Pclass', data=visualize, color='red')
plt.title('Pclass Variables', fontweight='bold')

"""- We can see that from the **891 total passengers**, **491 are lower class passengers (3rd class)**, **216 are upper class passengers (1st class)** and **184 are middle class passengers (2nd class)**.
- It can be concluded that there are the **most passengers in 3rd class** compared to **1st class and 2nd class**.

### Analysis **SibSp** Variable

- Get **total data** on number passengers sibling or spouses
"""

print(visualize['SibSp'].value_counts())

sns.countplot(x='SibSp',data=visualize, color='blue')
plt.title('SibSp Variables', fontweight='bold')

"""- we can see that most passengers do not have siblings with a total of 608 passengers. followed by those who have 1 sibling with 209 passengers, 2 siblings with 28 passengers, 4 siblings with 18 passengers, 3 siblings with 16 passengers, 8 siblings with 7 passengers and finally 5 siblings with 5 passengers.

### Analysis **Age** Variable

Let's make histogram for analysis Age passengers
"""

fig, ax = plt.subplots(figsize = (10,7))
ax.hist(visualize['Age'], color = 'orange')
plt.title('Age Variables', fontweight='bold')

plt.show()

"""It can be seen that the most ages are in the interval **18-33 years** based on the **histogram diagram**

### Analysis **Fare** Variable

Let's make histogram for analysis Fare passengers
"""

fig, ax = plt.subplots(figsize = (10,7))
ax.hist(visualize['Fare'], color = 'green')
plt.title('Fare Variables', fontweight='bold')

plt.show()

"""It can be seen that around **0-50** passengers **buy tickets at low prices**.

### Analysis **Sex** Variable

- Get **total data** on passengers male and female
"""

print(visualize['Sex'].value_counts())

"""- Plotting with bar plot
- check ratio of each value with pie plot
"""

# make function for category male or female passengers
def Groupby_OneCol_comp_plot(df, col, plt_style = 'seaborn-ticks', color_palette = "husl"):
    # Grouping col 1, sorting by size and deploy with a bar and pie plot
    gr=pd.DataFrame()
    gr['{} No'.format(col)] = df.groupby(col).size()
    gr['{} Ratio'.format(col)] = np.round(gr['{} No'.format(col)].divide(gr['{} No'.format(col)].sum())*100,0)

    print ('Total No. of {}:{}'.format(col,gr['{} No'.format(col)].sum()))

    plt.style.use(plt_style)
    sns.set_palette(sns.color_palette(color_palette))

    fig=plt.figure()
    plt.axis('off')

    fig.add_subplot(121)

    ax=gr['{} No'.format(col)].plot(kind='bar', title='{} Counts'.format(col), figsize=(16,8), color=sns.color_palette())
    _ = plt.setp(ax.get_xticklabels(), rotation=0)
    for p in ax.patches: ax.annotate(np.round(p.get_height(),decimals=2),
                                     (p.get_x()+p.get_width()/2., p.get_height()),
                                     ha='center', va='center', xytext=(0, 10), textcoords='offset points')
    ax.get_yaxis().set_ticks([])
    plt.xlabel('')

    fig.add_subplot(122)
    plt.axis('off')
    gr.loc[:,'{} Ratio'.format(col)].plot(kind= 'pie',
                                     autopct='%1.1f%%',shadow=False,
                                     title='{} Ratio'.format(col), legend=False, labels=None);
    sns.despine(top=True, right=True, left=True, bottom=False);

"""- Use the function defined above by entering the sex variable"""

Groupby_OneCol_comp_plot(visualize, 'Sex')

"""- It can be seen that from **891 passengers**, **577 passengers are male** with **sex ratio 65%** and **314 passengers are female** with **sex ratio 35%**.
- It can be concluded that there are **more male passengers** than **female passengers**.

### Analysis **Embarked** Variable

- Use the function defined above by entering the Embarked variable
"""

Groupby_OneCol_comp_plot(visualize, 'Embarked')

"""- We see that the majority of passengers **(644 of 889 - 72.3%**) embarked in **Southampton**, **(168 of 891 - 18.8%)** embarked in **Cherbourg** and only **77 passengers - 8.9% -** embarked in **Queenstown**.
- It can be concluded that there are **more passengers embarked from Southampton** than **passengers embarked from Cherbourg and Queenstown**.

## **Relation Between Variables**

### Relation **Survived** with **Pclass** Feature
"""

visualize.groupby(['Survived','Pclass'])['Survived'].count()

sns.set_style('whitegrid')
sns.countplot(x='Pclass',hue='Survived',data=visualize,palette='mako') # visualize countplot Pclass variable with set hue = Survived variable
plt.title('Survived vs Pclass', fontweight='bold')

"""- It can be seen that the **highest number of passengers who did not survive were in 3rd class** there were **372 passengers**, followed by **2nd class** there were **97 passengers**, then **1st class** there were **80 passengers**. Meanwhile, the **highest number of survived passengers was in 1st class** tehre were **136 passengers**, followed by **3rd class** there were **119 passengers**a nd finally **2nd class** there were **87 passengers**.

### Relation **Survived** with **Sex** Feature
"""

visualize.groupby(['Survived','Sex'])['Survived'].count()

sns.set_style('whitegrid')
sns.countplot(x='Sex',hue='Survived',data=visualize,palette='rocket') # visualize countplot Sex variable with set hue = Survived variable
plt.title('Survived vs Sex', fontweight='bold')

"""- As we can see in the above plot Out of all **male passengers most of them died** there were **468 passengers**. And **out of all Female passengers, most of them survived** as many as **233 passengers**.
- So in conclusion we can say **a male passenger has a higher chance to die** and **female passengers have a higher chance to survive**.

### Relation **Survived** with **SibSp** Feature
"""

visualize.groupby(['Survived','SibSp'])['Survived'].count()

sns.set_style('whitegrid')
sns.countplot(x='SibSp',hue='Survived',data=visualize,palette='rainbow') # visualize countplot SibSp variable with set hue = Survived variable
plt.title('Survived vs SibSp', fontweight='bold')

"""- Most of the passengers who **did not have siblings** died
- Passengers who have **1 sibling** are more likely to **survive**
- And then passengers who have **2,3,4,5 and 8 are more likely not survived**. **Strangely, logically, when we have more than 2 or more siblings, we should have a high survival rate**. It is possible that at that time everyone experienced panic and thought about saving themselves.

### Relation **Survived** with **Embarked** Feature
"""

visualize.groupby(['Survived','Embarked'])['Survived'].count()

sns.set_style('whitegrid')
sns.countplot(x='Embarked',hue='Survived',data=visualize,palette='magma') # visualize countplot SibSp variable with set hue = Survived variable
plt.title('Survived vs Embarked', fontweight='bold')

"""- Passengers who started their journey from **Southampton**, **most of them died there were** **427 passengers** and **survived there were 219 passengers**, followed by **Cherbourg** and **Queenstown**.

### Relation **Survived** with **Fare** Feature
"""

sns.kdeplot(data=visualize, x='Fare', hue='Survived', shade=True)
plt.title('Survived vs Fare', fontweight='bold')

"""Titanic **passengers who paid poorly**, had **a very high** death rate. In addition, fair and high paying Titanic passengers had a **high survival rate**.
This relates to the **rich Pclass (1st) having a high survival rate compared to the poor Pclass (3rd) having a low survival rate**.

### Relation **Survived** with **Age** Feature
"""

sns.kdeplot(data=visualize, x='Age', hue='Survived', shade=True)
plt.title('Survived vs Age', fontweight='bold')

"""It can be seen that the data on passengers who survive is **more in the age range from 0 to 14 years**. **This proves that the term putting the safety of children and women first is correct**."""